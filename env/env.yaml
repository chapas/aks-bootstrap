global:
  subscriptionName: "{{ .Values.global.subscriptionName }}"
  location: "{{ .Values.global.location }}"
  servicePrincipal: "{{ .Values.global.subscriptionAlias }}-{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-spn"
  resourceGroup: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-rg"
  components:
    terraform: true
    aks: true
    acr: true
    servicebus: true
    appInsights: true
    cosmosdb:
      docDb: false
      mongoDb: false
      graphDb: false
    dns: true
    traffic: true
    redis: true
kv:
  name: "{{ .Values.global.subscriptionAlias }}-kv"
  resourceGroup: "{{ .Values.global.subscriptionAlias }}-rg"
  location: "{{ .Values.global.location }}"
terraform:
  resourceGroup: "{{ .Values.global.owner }}-tf-rg"
  location: "{{ .Values.global.location }}"
  servicePrincipal: "{{ .Values.global.subscriptionAlias }}-{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-tf-spn"
  servicePrincipalSecretName: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-tf-spn-pwd"
  stateStorageAccountName: "{{ .Values.global.subscriptionAlias }}{{ .Values.global.owner }}tfstorage"
  stateBlobContainerName: "tfstate"
acr:
  name: "{{ .Values.global.subscriptionAlias }}{{ .Values.global.envName }}acr"
  resourceGroup: "{{ .Values.global.owner }}-acr-rg"
  location: "{{ .Values.global.location }}"
  passwordSecretName: "{{ .Values.global.owner }}-{{ .Values.global.envName }}-acr-pwd"
  email: "{{ .Values.acr.email }}"
aks:
  clusterName: "{{ .Values.global.subscriptionAlias }}-{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-cluster"
  resourceGroup: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-rg"
  location: "{{ .Values.global.location }}"
  dnsPrefix: {{ .Values.aks.aksDnsPrefix }}
  version: "1.13.7"
  servicePrincipal: "{{ .Values.global.subscriptionAlias }}-{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-spn"
  servicePrincipalPassword: "{{ .Values.global.subscriptionAlias }}-{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-spn-pwd"
  forceResetSpn: true
  clientAppName: "{{ .Values.global.subscriptionAlias }}-{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-client"
  ownerUpn: "{{ .Values.aks.aksOwnerAadUpn }}"
  nodeCount: 3
  vmSize: Standard_D2_v2
  adminUserName: "{{ .Values.aks.adminUsername }}"
  ssh_pubblic_key: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-ssh-pub"
  ssh_private_key: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-ssh-key"
  ssh_cert_pwd_ame: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-k8s-ssh-pwd"
  purpose: "{{ .Values.aks.purpose }}"
  access:
    readers:
      - name: "Compliance Tooling Team"
        type: group
    contributors:
      - name: "1cs dri"
        type: group
    owners:
      - name: xiaodoli@microsoft.com
        type: user
  useDevSpaces: true
  useTerraform: false
  useIstio: true
  useCertManager: true # used together with letsencrypt to automate cert creation and trust
  keyVaultAccess: # allowed values: podIdentity, flexVolume, KMS, secretBroker
    - podIdentity
    - secretBroker
  metrics: # allowed values: geneva (telegraf-mdmd), prometheus, appInsights
    - geneva
    - prometheus
    - appInsights
  logging: # allowed values: geneva (fluentd-mdsd), appInsights (applicationInsights), efk (fluentd-elasticSearch-kabana)
    - geneva
    - appInsights
  tracing: # allowed values: openTracing, openCensus (with jaegerUI)
    - openTracing
  ingress: #allowed values: nginx, traefik
    - nginx
  secrets:
    addContainerRegistryAccess: false
    addKeyVaultAccess: false
    addAppInsightsKey: false
  certs:
    - name: KeyVault-Certificate
    - name: Ssl-Certificate
    - name: Ssl-Aks-Default-Certificate
    - name: Crash-Certificate
    - name: Ingestion-Certificate
    - name: Geneva-Certificate
      type: geneva
    - name: TestRunner-Certificate
    - name: KustoIngestion-Certificate
    - name: Accounts-Management-Ssl-Certificate
    - name: Api-Gateway-Ssl-Certificate
    - name: AppCenterSsl-Certificate
    - name: Customer-Credential-Store-Ssl-Certificate
    - name: HockeyAppSxSSsl-Certificate
    - name: IngestionSsl-Certificate
    - name: Mail-Sender-Ssl-Certificate
    - name: Oauth-Token-Storage-Ssl-Certificate
    - name: PortalServerInstallSsl-Certificate
    - name: CiApiIntTrafficManagerSsl-Certificate
    - name: CiApiLiveIntTrafficManagerSsl-Certificate
    - name: CiAccountsIntTrafficManagerSsl-Certificate
    - name: MobileCenterAvalanchesSsl-Certificate
    - name: NotificationHub-Ssl-Certificate
appInsights:
  resourceGroup: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-rg"
  resourceType: "Microsoft.Insights/components"
  name: "{{ .Values.global.subscriptionAlias }}-{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-appinsights"
  location: "{{ .Values.global.location }}"
  applicationType: web
  instrumentationKeySecret: "app-insights-instrumentation-key"
cosmosdb:
  docDb:
    account: "{{ .Values.global.subscriptionAlias }}-{{ .Values.global.envName }}-docdb"
    api: "SQL"
    db: "product-catalog"
    collections:
      - name: "policy-ado-snapshot"
        partition: "/partitionKey"
        throughput: 1000
      - name: "policy-catalog"
      - name: "policy-events"
        partition: "/partitionKey"
      - name: "policy-events-error"
        partition: "/partitionKey"
      - name: "policy-events-lease"
      - name: "policy-extension"
        partition: "/partitionKey"
      - name: "policy-install"
        partition: "/partitionKey"
      - name: "policy-installerror"
        partition: "/partitionKey"
      - name: "policy-refresh"
        partition: "/partitionKey"
      - name: "policy-refresh-error"
        partition: "/partitionKey"
      - name: "policy-refresh-lease"
      - name: "policy-snapshots"
        partition: "/partitionKey"
        throughput: 1000
      - name: "policy-snapshots-error"
        partition: "/partitionKey"
      - name: "policy-snapshots-lease"
      - name: "policy-subscription-registry"
        partition: "/id"
      - name: "policy-catalog"
      - name: "products"
      - name: "ps"
        partition: "/partitionKey"
      - name: "ps-lease"
        partition: "/id"
    keySecret: "docdb-key"
    resourceGroup: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-rg"
    location: "{{ .Values.global.location }}"
    consistencyLevel: Strong
  mongoDb:
    account: "{{ .Values.global.subscriptionAlias }}-{{ .Values.global.envName }}-mongodb"
    api: "Mongo"
    db: "docs"
    collections:
      - "compliance"
    keySecret: "mongodb-key"
    resourceGroup: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-rg"
    location: "{{ .Values.global.location }}"
  graphDb:
    account: "{{ .Values.global.subscriptionAlias }}-{{ .Values.global.envName }}-graphdb"
    api: "Gremlin"
    db: "graph"
    collections:
      - "requirements"
    keySecret: "graphdb-key"
    resourceGroup: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-rg"
    location: "{{ .Values.global.location }}"
servicebus:
  name: "{{ .Values.global.subscriptionAlias }}-{{ .Values.global.envName }}-servicebus"
  resourceGroup: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-rg"
  location: "{{ .Values.global.location }}"
  sku: Standard
  queues:
    - name: change-feed
    - name: dead-letter
  topics:
    - name: status
dns:
  name: "{{ .Values.global.subscriptionAlias }}-dns"
  domain: "{{ .Values.global.envName }}.xiaodong.world"
  country: US
  state: WA
  city: Redmond
  organization: onees
  resourceGroup: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-rg"
  location: "{{ .Values.global.location }}"
  image:
    name: 1es/external-dns
    tag: 638873
  sslCert: sslcert-dev-xiaodong-world
  sslCertSelfSigned: true # when cert is self-signed, turn on let's-encrypt and cert-manager to automate creation and trust
  domainOwnerEmail: lingxd@gmail.com
  letsencrypt:
    issuer: production # allowed values: staging and production
nginx:
  controller:
    image:
      name: 1es/nginx-ingress-controller
      tag: 638875
  defaultBackend:
    image:
      name: 1es/defaultbackend
      tag: 638875
trafficManager:
  name: "{{ .Values.global.subscriptionAlias }}-traffic"
  resourceGroup: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-rg"
geneva:
  account: oneesdiscoint
  namespace: intdiscoeastusonees
  tenant: intdiscoeastusonees
  environment: DiagnosticsProd
  role: OneesDiscoInt
  certName: Geneva-Certificate
  certThumbprintSecret: Geneva-CertificateThumbprint
  k8sSecret: geneva-certificate
  k8sNamespace: default
  secretCert: gcscert.pem
  secretKey: gcskey.pem
  replicas: 2
  metricsAksmsi:
    image:
      name: geneva/linux-geneva-agent/metrics-aksmsi
      tag: "577701"
  metrics:
    image:
      name: geneva/linux-geneva-agent/metrics
      tag: "577701"
  metricsTelegraf:
    image:
      name: geneva/linux-geneva-agent/metrics-telegraf
      tag: "577701"
  secretBroker:
    image:
      name: "secret-broker"
      tag: "394719"
      cert: "ssl-aks-default-certificate"
  mdm:
    image:
      name: geneva/genevamdm
      tag: latest
  mdmstatsd:
    image:
      name: geneva/genevamdmstatsd
      tag: latest
  mdsd:
    image:
      name: geneva/geneva-mdsd
      tag: 577699
    confs:
    - name: mdsd.xml
    monikers:
      general:
        name: genevab1e8b039
        storageAccount: genevab1e8b039
        serviceBus: genevab1e8b039
        location: eastus
      audit:
        name: genevab1e8b039audit
        storageAccount: genevab1e8b039audit
        serviceBus: genevab1e8b039audit
        location: eastus
      security:
        name: genevab1e8b039security
        storageAccount: genevab1e8b039security
        serviceBus: genevab1e8b039security
        location: eastus
  fluentd:
    image:
      name: geneva/geneva-fluentd
      tag: 577699
    confs:
    - name: fluentd-api.conf
    - name: fluentd-container-logs.conf
    - name: fluentd-systemd.conf
    - name: fluentd.conf
  azsecpack:
    image:
      name: geneva/azsecpack
      tag: 335686
  janitor:
    confs:
      - name: logrotate_mdsd.conf
      - name: janitor_start.sh
redis:
  name: "{{ .Values.global.subscriptionAlias }}-redis"
  port: 6380
  resourceGroup: "{{ .Values.global.productShortName }}-{{ .Values.global.envName }}-{{ .Values.global.owner }}-{{ .Values.global.loc }}-rg"
  location: "{{ .Values.global.location }}"
  sku: basic
  vmSize: c0
  accessKeySecret: "{{ .Values.global.subscriptionAlias }}-redis-access-key"
prometheus:
  prometheus:
    logLevel: info
  alertmanager:
    logLevel: debug
  grafana:
    adminUser: "admin"
    adminPassword: "grafana"
    logLevel: info